# Stream Drills

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Stream Drills

Drills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.

This set of drills is for [Streams](../reading/streams.livemd) follow the instructions for each drill and complete them as quickly as you can.

## Stream.map/2

Use [Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2) to double elements in a range from `1..10`, then use [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to convert the resulting stream into a list `[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]`

```elixir
1..10
|> Stream.map(fn each -> each * 2 end)
|> Enum.to_list()
```

Use [Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2) and [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to sum a list of tuple pairs `[{1, 1}, {2, 2}, {3, 3}]` into `[2, 4, 6]`.

```elixir
[{1, 1}, {2, 2}, {3, 3}]
|> Stream.map(fn {number, _} -> number * 2 end)
|> Enum.to_list()
```

## Stream.filter/2

Use [Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2) and [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to filter even numbers from a range `1..10` to return `[2, 4, 6, 8, 10]`.

```elixir
1..10
|> Stream.map(fn each -> each * 2 end)
|> Stream.filter(fn each -> each <= 10 end)
|> Enum.to_list()
```

Use [Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2) and [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to filter numbers greater than `5` from a range `1..10` to return `[6, 7, 8, 9, 10]`.

```elixir
1..10
|> Stream.filter(fn each -> each > 5 end)
|> Enum.to_list()
```

## Stream.cycle/1

Use [Stream.cycle/1](https://hexdocs.pm/elixir/Stream.html#cycle/1) with [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate the list `[1, 2, 3, 1, 2, 3, 1, 2, 3]`.

```elixir
Stream.cycle([1, 2, 3])
|> Enum.take(9)
```

Use [Stream.cycle/1](https://hexdocs.pm/elixir/Stream.html#cycle/1) with [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate the list `["a", "b", "a", "b"]`

```elixir
Stream.cycle(["a", "b"])
|> Enum.take(4)
```

## Stream.iterate/2

Use [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of numbers from `1` to `10`.

```elixir
Stream.iterate(1, &(&1 + 1))
|> Enum.take(10)
```

Use [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of negative numbers from `0` to `-10`.

```elixir
Stream.iterate(0, &(&1 - 1))
|> Enum.take(11)
```

Use [Stream.iterate/2](https://hexdocs.pm/elixir/Stream.html#iterate/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of `1` to `10` to the power of 2 by multiplying each accumulator by 2. i.e. $1^2, 2^2, 3^2$

```elixir
Stream.unfold(1, fn accumulator ->
  value = accumulator ** 2
  next_accumulator = accumulator + 1
  {value, next_accumulator}
end)
|> Enum.take(10)
```

## Stream.unfold/2

Use [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of `10` cubed numbers. i.e. $1^3, 2^3, 3^3$

```elixir
Stream.unfold(1, fn accumulator ->
  value = accumulator ** 3
  next_accumulator = accumulator + 1
  {value, next_accumulator}
end)
|> Enum.take(10)
```

Use [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of `5` integers as strings. `["1", "2", "3", "4", "5"]`.

```elixir
Stream.unfold(1, fn accumulator ->
  value = "#{accumulator}"
  next_accumulator = accumulator + 1
  {value, next_accumulator}
end)
|> Enum.take(5)
```

Use [Stream.unfold/2](https://hexdocs.pm/elixir/Stream.html#unfold/2) and [Enum.take/2](https://hexdocs.pm/elixir/Enum.html#take/2) to generate a list of integers from `1` to `10` divided by `2`.

```elixir
Stream.unfold(1, fn accumulator ->
  next_accumulator = accumulator / 2
  {accumulator, next_accumulator}
end)
|> Enum.take(10)
```

## Stream.chunk_every/2

Use [Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2) with [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1) to chunk `[1, 1, 2, 2, 3, 3]` into `[[1, 1], [2, 2], [3, 3], [4, 4]]`

```elixir
[1, 1, 2, 2, 3, 3, 4, 4]
|> Stream.chunk_every(2)
|> Enum.to_list()
```

Use [Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2) to chunk `[1, 1, 1, 2, 2, 2]` into `[[1, 1, 1], [2, 2, 2]]`

```elixir
[1, 1, 1, 2, 2, 2]
|> Stream.chunk_every(3)
|> Enum.to_list()
```

Use [Stream.chunk_every/2](https://hexdocs.pm/elixir/Stream.html#chunk_every/2) to chunk `[1, 2, 2, 1, 4, 4]` into pairs, then use [Stream.map/2](https://hexdocs.pm/elixir/Stream.html#map/2) to sum the pairs together to make `[3, 3, 8]`.

```elixir
[1, 2, 2, 1, 4, 4]
|> Stream.chunk_every(2)
|> Stream.map(fn [number1, number2] -> number1 + number2 end)
|> Enum.to_list()
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git checkout main
$ git checkout -b exercise-stream_drills
$ git add .
$ git commit -m "finish stream drills exercise"
$ git push origin exercise-stream_drills
```

Then create a pull request to your `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

## Up Next

| Previous                             | Next                                                             |
| ------------------------------------ | ---------------------------------------------------------------: |
| [Streams](../reading/streams.livemd) | [Lazy Product Filters](../exercises/lazy_product_filters.livemd) |
