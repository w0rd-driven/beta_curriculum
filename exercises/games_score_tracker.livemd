# Games: Score Tracker

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Games: Score Tracker

Previously you created a [Score Tracker](./score_tracker.livemd) [GenServer](https://hexdocs.pm/elixir/GenServer.html) which can track and add to a score.

You're going to re-create this score tracker in a `Games.ScoreTracker` module.
You may use this `Games.ScoreTracker` module in future exercises to keep track of a score.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Games.ScoreTracker.start_link([])
Games.ScoreTracker.score(pid, 10)
10 = Games.ScoreTracker.get_score(pid)
Games.ScoreTracker.score(pid, 20)
30 = Games.ScoreTracker.get_score(pid)
```

```elixir
defmodule Games.ScoreTracker do
  @moduledoc """
  Documentation for `ScoreTracker`
  """
  use GenServer

  @doc """
  Start the `ScoreTracker` process.

  ## Examples

    iex> {:ok, pid} = ScoreTracker.start_link([])
  """
  def start_link(_opts) do
    GenServer.start_link(__MODULE__, [])
  end

  @doc """
  Asynchronously increase the stored score by the specified amount.

  ## Examples

      iex> {:ok, pid} = ScoreTracker.start_link([])
      iex> ScoreTracker.score(pid, 10)
      :ok
  """
  def score(score_tracker_pid, amount) do
    GenServer.cast(score_tracker_pid, {:score, amount})
  end

  @doc """
  Synchronously return the current score state.

  ## Examples

      iex> {:ok, pid} = ScoreTracker.start_link([])
      iex> ScoreTracker.get_score(pid)
      0
  """
  def get_score(score_tracker_pid) do
    GenServer.call(score_tracker_pid, :get_score)
  end

  @impl true
  def init(_state) do
    {:ok, 0}
  end

  @impl true
  def handle_cast({:score, amount}, state) do
    {:noreply, state + amount}
  end

  @impl true
  def handle_call(:get_score, _from, state) do
    {:reply, state, state}
  end
end
```

```elixir
ExUnit.start(auto_run: false)

defmodule Games.ScoreTrackerTest do
  use ExUnit.Case

  describe "start_link/1" do
    test "with no configuration" do
      assert {:ok, _pid} = Games.ScoreTracker.start_link([])
    end
  end

  describe "score/2" do
    test "adding a single score returns that score" do
      assert {:ok, pid} = Games.ScoreTracker.start_link([])
      assert Games.ScoreTracker.score(pid, 10) == :ok
      assert :sys.get_state(pid) == 10
    end

    test "adding two scores returns the sum" do
      assert {:ok, pid} = Games.ScoreTracker.start_link([])
      assert Games.ScoreTracker.score(pid, 10) == :ok
      assert Games.ScoreTracker.score(pid, 40) == :ok
      assert :sys.get_state(pid) == 50
    end
  end

  describe "get_score/1" do
    test "when no scores have been added" do
      assert {:ok, pid} = Games.ScoreTracker.start_link([])
      assert Games.ScoreTracker.get_score(pid) == 0
    end

    test "when one score has been added" do
      assert {:ok, pid} = Games.ScoreTracker.start_link([])
      assert Games.ScoreTracker.get_score(pid) == 0
      assert Games.ScoreTracker.score(pid, 10) == :ok
      assert Games.ScoreTracker.get_score(pid) == 10
    end

    test "when two scores have been added" do
      assert {:ok, pid} = Games.ScoreTracker.start_link([])
      assert Games.ScoreTracker.get_score(pid) == 0
      assert Games.ScoreTracker.score(pid, 10) == :ok
      assert Games.ScoreTracker.get_score(pid) == 10
      assert Games.ScoreTracker.score(pid, 40) == :ok
      assert Games.ScoreTracker.get_score(pid) == 50
    end
  end
end

ExUnit.run()
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-games_score_tracker
$ git add .
$ git commit -m "finish games score tracker exercise"
$ git push origin exercise-games_score_tracker
```

**DockYard Academy Students Only:**

Create a pull request to your forked `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                           | Next                                                                         |
| ---------------------------------- | ---------------------------------------------------------------------------: |
| [Stack](../exercises/stack.livemd) | [Games Global Score Tracker](../exercises/games_global_score_tracker.livemd) |
