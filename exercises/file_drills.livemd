# File Drills

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## File Drills

Drills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.

This set of drills is for the [File](../reading/file.livemd) module. Follow the instructions for each drill and complete them as quickly as you can.

## File

Use [File.ls/2](https://hexdocs.pm/elixir/File.html#ls/2) to list all of the files/folders in the current path.

```elixir
File.ls()
```

Use [File.ls/2](https://hexdocs.pm/elixir/File.html#ls/2) to list all of the files/folders in the parent directory of the current path.

```elixir
File.ls("..")
```

Use [File.mkdir/1](https://hexdocs.pm/elixir/File.html#mkdir/1) to create a directory called `drills`.

```elixir
File.mkdir("drills")
```

Use [File.dir?/2](https://hexdocs.pm/elixir/File.html#dir?/2) to check that `drills` is a folder.

```elixir
File.dir?("drills")
```

Use [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create an empty file called `drills.txt`.

```elixir
File.write("drills.txt", "")
```

Use [File.exists?/2](https://hexdocs.pm/elixir/File.html#exists?/2) to check that the `drills.txt` file exists.

```elixir
File.exists?("drills.txt")
```

Use [File.dir?/2](https://hexdocs.pm/elixir/File.html#dir?/2) to check that `drills.txt` is not a folder.

```elixir
File.dir?("drills.txt")
```

Use [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create a filed called `hello.txt` with the content `"world"`.

```elixir
File.write!("hello.txt", "world")
```

Use [File.read/1](https://hexdocs.pm/elixir/File.html#read/1) to read the content of the `hello.txt` file.

```elixir
File.read("hello.txt")
```

Use [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create an empty file in the `drills` folder you previously created.

```elixir
path = Path.join("drills", "empty.txt")
File.write(path, "")
```

Use [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create an `error/no_entity.txt` file that should return `{:error, :enoent}` because the `error` folder does not exist.

```elixir
path = Path.join("error", "no_entity.txt")
File.write(path, "")
```

Use [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to create a file `multi-line.txt` with a multi-line string.

<!-- livebook:{"force_markdown":true} -->

```elixir
multiline_string = """
line 1
line 2
line 3
line 4
line 5
"""
```

```elixir
multiline_string = """
line 1
line 2
line 3
line 4
line 5
"""

File.write("multi-line.txt", multiline_string)
```

Use [File.read/1](https://hexdocs.pm/elixir/File.html#read/1) to read `multi-line.txt`.

```elixir
File.read("multi-line.txt")
```

Use [File.stream!/3](https://hexdocs.pm/elixir/File.html#stream!/3) to read each line of `multi-line.txt` and convert it to a list of lines using [Enum.to_list/1](https://hexdocs.pm/elixir/Enum.html#to_list/1).

```elixir
File.stream!("multi-line.txt", [], :line) |> Enum.to_list()
```

Use [File.stream!/3](https://hexdocs.pm/elixir/File.html#stream!/3) and [Stream.filter/2](https://hexdocs.pm/elixir/Stream.html#filter/2) to filter in lines from `multi-line.txt` that contain numbers less than or equal to `3`.

Use [File.write/3](https://hexdocs.pm/elixir/File.html#write/3) to re-write `multi-line.txt` with only the filtered lines.

<!-- livebook:{"force_markdown":true} -->

```elixir
"""
line 1
line 2
line 3
"""
```

```elixir
File.stream!("multi-line.txt")
|> Stream.filter(fn line ->
  String.contains?(line, "1") || String.contains?(line, "2") || String.contains?(line, "3")
end)
|> Enum.to_list()
```

Use [File.open/2](https://hexdocs.pm/elixir/File.html#open/2), [IO.binread/2](https://hexdocs.pm/elixir/IO.html#binread/2), and [File.close/1](https://hexdocs.pm/elixir/File.html#close/1) to read the first line of `multi-line.txt`. Print the value.

```elixir
{:ok, file} = File.open("multi-line.txt")
line1 = IO.binread(file, :line)
:ok = File.close(file)
line1
```

Use [File.mkdir_p/1](https://hexdocs.pm/elixir/File.html#mkdir_p/1) to create:

* `"parent/sub_a/"`
* `"parent/sub_b"`
* `"parent/sub_c"`

```elixir
path1 = "parent/sub_a/"
path2 = "parent/sub_b"
path3 = "parent/sub_c"

File.mkdir_p(path1)
File.mkdir_p(path2)
File.mkdir_p(path3)
```

Use [File.write!/3](https://hexdocs.pm/elixir/File.html#write!/3) to create six empty files:

* `"parent/sub_a/file.txt"`
* `"parent/sub_a/file"`
* `"parent/sub_b/file.txt"`
* `"parent/sub_b/file"`
* `"parent/sub_c/file.txt"`
* `"parent/sub_c/file"`

```elixir
File.write!(Path.join(path1, "file.txt"), "")
File.write!(Path.join(path1, "file"), "")
File.write!(Path.join(path2, "file.txt"), "")
File.write!(Path.join(path2, "file"), "")
File.write!(Path.join(path3, "file.txt"), "")
File.write!(Path.join(path3, "file"), "")
```

Use [File.ls!/1](https://hexdocs.pm/elixir/File.html#ls!/1) to find all of the files/folders inside of the `parent` folder.

```elixir
File.ls!("parent")
```

## Path

Use [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) to join `"/parent/"` and `"/child/"`

```elixir
Path.join("/parent/", "/child/")
```

Use [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) to join `"parent"` and `"child"`

```elixir
Path.join("parent", "child")
```

Use [Path.join/2](https://hexdocs.pm/elixir/Path.html#join/2) to join `"folder"` and `"file.txt"`.

```elixir
Path.join("folder", "file.txt")
```

Use [Path.absname/1](https://hexdocs.pm/elixir/Path.html#absname/1) to convert the current path `"."` to an absolute path.

```elixir
Path.absname(__DIR__)
```

Use [Path.dirname/1](https://hexdocs.pm/elixir/Path.html#dirname/1) to find the directory name of `"folder/subfolder/file.txt"`

```elixir
Path.dirname("folder/subfolder/file.txt")
```

Use [Path.dirname/1](https://hexdocs.pm/elixir/Path.html#dirname/1) to find the directory name of `"file.txt"`.

```elixir
Path.dirname("file.txt")
```

Use [Path.wildcard/2](https://hexdocs.pm/elixir/Path.html#wildcard/2) to find all files in a nested folder `"parent/*"` that end in a `.txt` extension. You should see your three `file.txt` files created earlier.

```elixir
Path.wildcard("parent/**/*.txt")
```

Use [File.rm_rf/1](https://hexdocs.pm/elixir/File.html#rm_rf/1) to delete all folders created by this exercise.

<div style="background-color: lightcoral; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;">
CAUTION: DO NOT DELETE IMPORTANT FILES ON YOUR COMPUTER.
</div>

```elixir
File.rm_rf("parent")
File.rm_rf("drills")
```

Use [File.rm/1](https://hexdocs.pm/elixir/File.html#rm/1) to delete any remaining files created by this exercise.

<div style="background-color: lightcoral; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;">
CAUTION: DO NOT DELETE IMPORTANT FILES ON YOUR COMPUTER.
</div>

```elixir
File.rm_rf("drills.txt")
File.rm_rf("hello.txt")
File.rm_rf("multi-line.txt")
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-file_drills
$ git add .
$ git commit -m "finish file drills exercise"
$ git push origin exercise-file_drills
```

Create a pull request to your forked `main` branch. Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                       | Next                                       |
| ------------------------------ | -----------------------------------------: |
| [File](../reading/file.livemd) | [Save Game](../exercises/save_game.livemd) |
