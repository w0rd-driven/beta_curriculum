# Process Drills

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Process Drills

Drills help you develop familiarity and muscle memory with syntax through repeated exercises. Unlike usual problems, Drills are not intended to develop problem solving skills, they are purely for developing comfort and speed.

This set of drills is for the [Process](https://hexdocs.pm/elixir/Process.html) module follow the instructions for each drill and complete them as quickly as you can.

## Process.send/3

Use [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) and `self()` to send the process for the Elixir cell below a `:message` message. Use [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to receive the message in the same cell.

```elixir
Process.send(self(), :message, [])

receive do
  :message -> "I was sent"
end
```

Use [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) and `self()` to send the process for the Elixir cell below a message with a value i.e. `{:message, "value"}`. Use [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to receive the message in the same cell and return the value.

```elixir
Process.send(self(), {:message, "value"}, [])

receive do
  {:message, value} -> value
end
```

## Process.spawn/2

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) to spawn a new process which adds two integers together.

```elixir
pid =
  Process.spawn(
    fn ->
      IO.puts(1 + 5)
    end,
    [:monitor]
  )
```

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds, then prints "Finished!".

```elixir
pid =
  Process.spawn(
    fn ->
      Process.sleep(1000 * 5)
      IO.puts("Finished!")
    end,
    [:monitor]
  )
```

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to spawn a process that receives a `:message` message. Use [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) to send the spawned process a `:message` message. The spawned process should print `"received a message!"`.

```elixir
pid =
  Process.spawn(
    fn ->
      receive do
        :message -> IO.puts("received a message!")
      end
    end,
    [:link]
  )

Process.send(pid, :message, [])
```

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to spawn a process that receives a message with a value i.e. `{:message, "value"}`. Use [Process.send/3](https://hexdocs.pm/elixir/Process.html#send/3) to send the spawned process a message with a value. The spawned process should print the received value.

```elixir
pid_value =
  Process.spawn(
    fn ->
      receive do
        {:message, value} -> IO.puts(value)
      end
    end,
    [:link]
  )

Process.send(pid_value, {:message, "value"}, [])
```

Use `Process.spawn` to spawn a process that raises an error. Notice it does not crash the Livebook, because it is an **unlinked** process.

```elixir
# pid = Process.spawn(fn ->
#   raise "oops"
# end, [:link])
```

Use [Process.spawn/3](https://hexdocs.pm/elixir/Process.html#spawn/3) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process which raises an error after one second. Use [Process.link/1](https://hexdocs.pm/elixir/Process.html#link/1) to link the process.

Livebook should crash. Comment out your solution so that you can move on.

```elixir
# pid = Process.spawn(fn ->
#   Process.sleep(1000)
#   raise "oops"
# end, [:monitor])

# Process.link(pid)
```

## Process.alive?/1

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds. Use [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to check if the process is alive after two seconds. [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) should return `true`.

```elixir
pid_alive =
  Process.spawn(
    fn ->
      Process.sleep(1000 * 5)
    end,
    [:link]
  )

Process.sleep(1000 * 2)
Process.alive?(pid_alive)
```

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds. Use [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to check if the process is alive after six seconds. [Process.alive?/1](https://hexdocs.pm/elixir/Process.html#alive?/1) should return `false`.

```elixir
pid_dead =
  Process.spawn(
    fn ->
      Process.sleep(1000 * 5)
    end,
    [:link]
  )

Process.sleep(1000 * 6)
Process.alive?(pid_dead)
```

## Process.send_after/4

Use [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4) and `self()` to send the process for the Elixir cell below a message after two seconds. Use [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) in the same cell to receive the message.

```elixir
Process.send_after(self(), :message, 2000)

receive do
  :message -> IO.puts("Hay there")
end
```

Use [Process.spawn/3](https://hexdocs.pm/elixir/Process.html#spawn/3) to and [receive](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#receive/1) to spawn a process that waits to receive a message. Use [Process.send_after/4](https://hexdocs.pm/elixir/Process.html#send_after/4) to send the spawned process a message after two seconds.

```elixir
pid_after =
  Process.spawn(
    fn ->
      receive do
        :message -> IO.puts("Hay there")
      end
    end,
    [:link]
  )

Process.send_after(pid_after, :message, 2000)
```

## Process.exit/2

Use [Process.spawn/2](https://hexdocs.pm/elixir/Process.html#spawn/2) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a process that sleeps for five seconds. Print `"I started"` before sleeping, and `"I finished"` after sleeping to prove if the process finishes sleeping or not. Use [Process.exit/2](https://hexdocs.pm/elixir/Process.html#exit/2) with the `:normal` exit reason to kill the spawned process.

Once finished, switch the exit reason to `:kill` to demonstrate that the process is unlinked, because it does not crash the calling process.

```elixir
pid_exit =
  Process.spawn(
    fn ->
      IO.puts("I started")
      Process.sleep(1000 * 5)
      IO.puts("I finished")
    end,
    [:link]
  )

# Process.exit(pid_exit, :kill)
```

Use [Kernel.spawn_link/1](https://hexdocs.pm/elixir/Kernel.html#spawn_link/1) and [Process.sleep/1](https://hexdocs.pm/elixir/Process.html#sleep/1) to spawn a linked process that sleeps for five seconds. Use [Process.exit/2](https://hexdocs.pm/elixir/Process.html#exit/2) with the `:normal` exit reason to kill the spawned process.

Notice that the Livebook does not crash. Switch the exit reason to `:kill` and notice that the Livebook does crash. Comment out your solution to avoid crashing Livebook.

```elixir
pid_exit =
  spawn_link(fn ->
    Process.sleep(1000 * 5)
  end)

Process.exit(pid_exit, :normal)
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-process_drills
$ git add .
$ git commit -m "finish process drills exercise"
$ git push origin exercise-process_drills
```

Then create a pull request to your `main` branch and notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

## Up Next

| Previous                                 | Next                                                   |
| ---------------------------------------- | -----------------------------------------------------: |
| [Processes](../reading/processes.livemd) | [Process Mailbox](../exercises/process_mailbox.livemd) |
